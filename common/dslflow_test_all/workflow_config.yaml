variables:
  projectName: "55"
  paasName: "66"
root:
  activity:
    id: del-cd
    activity: del-cd
    default_arguments_force:
      project_name: "kkk"
    default_arguments_fallbaack:
      project_name: "mmm"
    arguments:
      paas_name: "zzz"
    responses:
      cd_id: "{{.outputs.cd_id}}"
    hooks:
      start:
        activity: check-cd
        default_arguments:
          - key: "project_name"
            value: "kkkk"
            override_policy: "force"
        arguments:
          paas_name: "zzz"
        responses:
          cd_id: "{{.outputs.cd_id}}"
    timeout: 600
    depends_on:
      - del-cd-recycling
    cached: true
    retry_policy:
      maximum_attempts: 3
  control:
    when: "true"
    onerror: "ignore"
    onexit: "exit"
  parallel:

  sequence:
    - activity:
        id: del-cd-recycling
        template: del-cd-recycling
    - activity:
        id: del-cd-auto-trigger
        template: del-cd-auto-trigger
    - activity:
        id: del-cd-log
        template: del-cd-log
    - activity:
        id: del-cd-grayscale
        template: del-cd-grayscale
    - activity:
        id: del-cd-alarm
        template: del-cd-alarm
    - activity:
        id: del-cd-incluster-service
        template: del-cd-incluster-service
    - activity:
        id: del-cd-bind-tag
        template: del-cd-bind-tag
    - activity:
        id: del-cd
        template: del-cd
response:
  paas_name: "{{.variables.paasName}}"





  Hooks            LifecycleHooks     `yaml:"hooks" json:"hooks,omitempty"`               // activity执行时的钩子程序
  Timeout          time.Duration      `yaml:"timeout" json:"timeout"`                     // 超时设置
  DependsOn        *Statement         `yaml:"depends_on" json:"depends_on"`               // 依赖的服务
  Cached           bool               `yaml:"cached" json:"cached"`                       // 相同的参数请求在整个流程中可以重复使用结果
  RetryPolicy      *RetryPolicyConfig `yaml:"retry_policy" json:"retry_policy"`           // 重试策略